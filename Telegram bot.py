# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª–∞—Å—Å—ã.
import logging
import os

import telegram.error
import yandex_music.exceptions
from telegram.ext import Application, MessageHandler, filters, ConversationHandler

import music_functions_async
from Token import BOT_TOKEN
from telegram.ext import CommandHandler
from telegram import ReplyKeyboardMarkup,InputMediaPhoto,MenuButtonCommands,MenuButton,ReplyKeyboardRemove,MenuButtonWebApp,\
    InlineKeyboardButton, InlineKeyboardMarkup, MenuButton
# –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)

logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π.
# –£ –Ω–µ—ë –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, updater, –ø—Ä–∏–Ω—è–≤—à–∏–π —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–æ–±—â–µ–Ω–∏–∏.

# –ù–∞–ø–∏—à–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏.
# –ò—Ö —Å–∏–≥–Ω–∞—Ç—É—Ä–∞ –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.

# async def start(update, context):
#     """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start"""
#     user = update.effective_user
#     await update.message.reply_html(
#         rf"–ü—Ä–∏–≤–µ—Ç {user.mention_html()}! –Ø –ø–æ–∏—Å–∫–æ–≤–∞—è –º–∞—à–∏–Ω–∞. –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –≤—Å–µ —Å–¥–µ–ª–∞—é, —Ö–æ–∑—è–∏–Ω!",
#     )
#
#
# async def help_command(update, context):
#     """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help"""
#     await update.message.reply_text("–≠—Ç–æ—Ç —É–º–µ–µ—Ç –∏—Å–∫–∞—Ç—å, —Å—Ä–∞–Ω–∏–≤–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–æ–≤–∞—Ä—ã) –ê –∫–∏—Ä–∏–ª–ª –ª–æ—Ö")
#
#
# async def favourites_command(update, context):
#     """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help"""
#     await update.message.reply_text("–ù–∏—á–µ—Ä—Ç–∞")
#
#
# async def search_command(update, context):
#     """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help"""
#     static_api_request = f"https://yandex.ru/images/search?pos=0&text=%D0%BA%D0%B0%D1%80%D1%82%D0%B8%D0%BD%D0%BA%D0%B0%20%D0%BD%D0%BE%D0%B6%D0%B0%20%D0%B4%D0%BB%D1%8F%20%D0%B8%D0%B3%D1%80&img_url=http%3A%2F%2Fw7.pngwing.com%2Fpngs%2F518%2F558%2Fpng-transparent-hunting-survival-knives-bowie-knife-utility-knives-weapon-knife-angle-arm-weapon.png&source=serp&rpt=simage&lr=53"
#     medias = [InputMediaPhoto(static_api_request),
#               InputMediaPhoto(static_api_request)]
#     await context.bot.send_media_group(
#         update.message.chat_id,  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞. –ö—É–¥–∞ –ø–æ—Å—ã–ª–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É.
#         # –°—Å—ã–ª–∫–∞ –Ω–∞ static API, –ø–æ —Å—É—Ç–∏, —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É.
#         # –¢–µ–ª–µ–≥—Ä–∞–º—É –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –ø—Ä—è–º–æ –µ—ë![](knife_6_01153805.jpg), –Ω–µ —Å–∫–∞—á–∏–≤–∞—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∫–∞—Ä—Ç—É.
#         medias, caption='''–ù–æ–∂ –ø–∏—Ç–µ—Ä—Å–∫–∏–π\nfgfgfg\nfgfgfüòò'''
#     )
#     await update.message.reply_photo('knife_6_01153805.jpg', caption='''–ù–æ–∂ –ø–∏—Ç–µ—Ä—Å–∫–∏–π\nfgfgfg\nfgfgfüòò''')
#     await update.message.reply_text('knife_6_01153805.jpg')
#
#
# async def photo_command(update, context):
#     pass
#
#
# async def echo(update, context):
#     if (update.message.text).split()[0]=='–ü–æ–∏—Å–∫:':
#         static_api_request = (update.message.text).split()[1]
#         medias = [InputMediaPhoto(static_api_request),
#                   InputMediaPhoto(static_api_request)]
#         await context.bot.send_media_group(
#             update.message.chat_id,  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞. –ö—É–¥–∞ –ø–æ—Å—ã–ª–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É.
#             # –°—Å—ã–ª–∫–∞ –Ω–∞ static API, –ø–æ —Å—É—Ç–∏, —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É.
#             # –¢–µ–ª–µ–≥—Ä–∞–º—É –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –ø—Ä—è–º–æ –µ—ë![](knife_6_01153805.jpg), –Ω–µ —Å–∫–∞—á–∏–≤–∞—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∫–∞—Ä—Ç—É.
#             medias, caption='''...
# –ü–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä
# –¶–µ–Ω–∞: 250—Ä
# –û—Ç–∑—ã–≤—ã: ‚≠ê‚≠ê‚≠ê‚≠ê
# –°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏: url.fgsjjhd
# ...
# –í—Ç–æ—Ä–æ–π —Ç–æ–≤–∞—Ä
# –¶–µ–Ω–∞: 250—Ä
# –û—Ç–∑—ã–≤—ã: ‚≠ê‚≠ê‚≠ê‚≠ê
# –°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏: url.fgsjjhd
# ...
# –¢—Ä–µ—Ç–∏–π —Ç–æ–≤–∞—Ä
# –¶–µ–Ω–∞: 250—Ä
# –û—Ç–∑—ã–≤—ã: ‚≠ê‚≠ê‚≠ê‚≠ê
# –°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏: url.fgsjjhd
# ...'''
#         )
#     else:
#         await update.message.reply_text(update.message.text)


# async def search_track(update, context):
#     search_string = update.message.text[13:].strip()  # 12 - –¥–ª–∏–Ω–∞ –∫–æ–º–∞–Ω–¥—ã
#     search_result = await music_functions_async.search(search_string)
#     answer = await music_functions_async.process_search(search_result)
#     await update.message.reply_text(answer)


async def search_users_playlists(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–≤–æ–π —Å—Ç–∞–¥–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –ø–æ–∏—Å–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤, –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –ø–æ id"""
    user_id = update.message.text[len('search_user_playlists') + 2:]
    # print(user_id)
    res = await music_functions_async.get_user_playlists(user_id)
    ans = await music_functions_async.process_user_playlist_search(res)
    await update.message.reply_text(ans)
    await update.message.reply_text('–î–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –Ω–æ–º–µ—Ä'
                                    ' –≤ –¥–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ, –¥–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ /stop')
    context.chat_data['user_id'] = user_id
    context.chat_data['playlists_amount'] = len(res)
    context.chat_data['result'] = res
    return 1


async def ask_for_playlist_download(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ç–æ—Ä–æ–π —Å—Ç–∞–¥–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –ø–æ–∏—Å–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤, –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞"""
    try:
        num = int(update.message.text)
        # print(num, '–≤–≤–µ–¥–µ–Ω–æ')
    except ValueError:
        await update.message.reply_text('–í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
        return 1
    if num > context.chat_data['playlists_amount']:
        await update.message.reply_text('–í–≤–µ–¥–µ–Ω —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –Ω–æ–º–µ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
        return 1
    await update.message.reply_text(f'–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —Å–∫–∞—á–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç\n '
                                    f'{await music_functions_async.get_playlist_name(context.chat_data["result"][num - 1])}?\n'
                                    f'–í–≤–µ–¥–∏—Ç–µ –¥–∞, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–∫–∞—á–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç, –∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –æ—Ç–≤–µ—Ç –≤ –∏–Ω–æ–º —Å–ª—É—á–∞–µ')
    context.chat_data['num'] = num
    return 2


async def download_playlist(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç—Ä–µ—Ç—å–µ–π —Å—Ç–∞–¥–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –ø–æ–∏—Å–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤, —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞"""
    if update.message.text.lower() != '–¥–∞':
        await update.message.reply_text('–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')
        return ConversationHandler.END
    await update.message.reply_text('–°–∫–∞—á–∏–≤–∞–µ–º...')
    playlist = context.chat_data['result'][context.chat_data['num'] - 1]
    # for track in await playlist.fetch_tracks_async():
    for track in (await music_functions_async.client.users_playlists(playlist.kind, playlist.owner.uid)).tracks:
        full_track = await track.fetch_track_async()
        await music_functions_async.download(full_track, folder='downloads/')
        await update.message.reply_text(f'{full_track["title"]} –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è...')
        file_sent = False
        while not file_sent:
            try:
                await context.bot.send_document(
                    document=open(f'downloads/{await music_functions_async.get_name_for_file(full_track)}', 'rb'), chat_id=update.message.chat_id)
                file_sent = True
            except telegram.error.TimedOut:
                continue

        os.remove(f'downloads/{await music_functions_async.get_name_for_file(full_track)}')
    # —Å–∫–∞—á–∏–≤–∞–µ–º –ø–ª–µ–π–ª–∏—Å—Ç
    return ConversationHandler.END


async def search_track_start(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–≤–æ–π —Å—Ç–∞–¥–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –ø–æ–∏—Å–∫–∞ —Ç—Ä–µ–∫–æ–≤, –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫"""
    search_string = update.message.text[13:].strip()  # 12 - –¥–ª–∏–Ω–∞ –∫–æ–º–∞–Ω–¥—ã
    search_result = await music_functions_async.search(search_string)
    answer = await music_functions_async.process_search(search_result)
    await update.message.reply_text(answer)
    await update.message.reply_text('–î–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–æ–º–µ—Ä –≤ —ç—Ç–æ–º —Å–ø–∏—Å–∫–µ, –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /stop')
    context.chat_data['result'] = search_result['tracks']['results']
    return 1


async def ask_for_track_download(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ç–æ—Ä–æ–π —Å—Ç–∞–¥–∏–∏ –ø–æ–∏—Å–∫–∞ —Ç—Ä–µ–∫–æ–≤, –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Å–∫–∞—á–∏–≤–∞–µ–º–æ–≥–æ —Ç—Ä–µ–∫–∞"""
    try:
        num = int(update.message.text)
        # print(num, '–≤–≤–µ–¥–µ–Ω–æ')
    except ValueError:
        await update.message.reply_text('–í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
        return 1
    if num > 10:
        await update.message.reply_text('–í–≤–µ–¥–µ–Ω —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –Ω–æ–º–µ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
        return 1
    await update.message.reply_text(f'–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫\n '
                                    f'{await music_functions_async.get_track_name(context.chat_data["result"][num - 1])}?\n'
                                    f'–í–≤–µ–¥–∏—Ç–µ –¥–∞, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫, –∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –æ—Ç–≤–µ—Ç –≤ –∏–Ω–æ–º —Å–ª—É—á–∞–µ')
    context.chat_data['num'] = num
    return 2


async def download_track(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç—Ä–µ—Ç—å–µ–π —Å—Ç–∞–¥–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –ø–æ–∏—Å–∫–∞ —Ç—Ä–µ–∫–æ–≤, —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞"""
    if update.message.text.lower() != '–¥–∞':
        await update.message.reply_text('–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')
        return ConversationHandler.END
    await update.message.reply_text('–°–∫–∞—á–∏–≤–∞–µ–º...')
    full_track = context.chat_data['result'][context.chat_data['num'] - 1]
    await music_functions_async.download(full_track, folder='downloads/')
    await update.message.reply_text(f'{await music_functions_async.get_track_name(full_track)} –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è...')
    file_sent = False
    while not file_sent:
        try:
            await context.bot.send_document(
                    document=open(f'downloads/{await music_functions_async.get_name_for_file(full_track)}', 'rb'), chat_id=update.message.chat_id)
            file_sent = True
        except telegram.error.TimedOut:
            continue

    os.remove(f'downloads/{await music_functions_async.get_name_for_file(full_track)}')
    # —Å–∫–∞—á–∏–≤–∞–µ–º –ø–ª–µ–π–ª–∏—Å—Ç
    return ConversationHandler.END


async def stop(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞ –∏–∑ –¥–∏–∞–ª–æ–≥–∞"""
    await update.message.reply_text("–í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!")
    return ConversationHandler.END


def main():
    # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç Application.
    # –í–º–µ—Å—Ç–æ —Å–ª–æ–≤–∞ "TOKEN" –Ω–∞–¥–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç @BotFather —Ç–æ–∫–µ–Ω
    application = Application.builder().token(BOT_TOKEN).build()

    # text_handler = MessageHandler(filters.TEXT & ~filters.COMMAND, echo)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.
    # application.add_handler(text_handler)
    # application.add_handler(CommandHandler("start", start))
    # application.add_handler(CommandHandler("help", help_command))
    # application.add_handler(CommandHandler("favourites", favourites_command))
    # application.add_handler(CommandHandler("search", search_command))


    playlist_search_conv_handler = ConversationHandler(
        entry_points=[CommandHandler('search_user_playlists', search_users_playlists)],
        states={1: [CommandHandler('stop', stop), MessageHandler(filters.ALL, ask_for_playlist_download)],
                2: [CommandHandler('stop', stop), MessageHandler(filters.ALL, download_playlist)]},
        fallbacks=[CommandHandler('stop', stop)])
    application.add_handler(playlist_search_conv_handler)

    track_search_conv_handler = ConversationHandler(
        entry_points=[CommandHandler('search_track', search_track_start)],
        states={1: [CommandHandler('stop', stop), MessageHandler(filters.ALL, ask_for_track_download)],
                2: [CommandHandler('stop', stop), MessageHandler(filters.ALL, download_track)]},
        fallbacks=[CommandHandler('stop', stop)]
    )
    application.add_handler(track_search_conv_handler)
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
    application.run_polling()


async def start(update, context):
    await update.message.reply_text(
        "–Ø –±–æ—Ç-—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫. –ö–∞–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–∞–º –Ω—É–∂–Ω–∞?",
    )


# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é main() –≤ —Å–ª—É—á–∞–µ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞.
if __name__ == '__main__':
    main()